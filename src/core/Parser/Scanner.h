#pragma once

//
// Created by Garry Morrison on 5/10/2020.
//
// Sourced from here:
// https://github.com/bingmann/flex-bison-cpp-example
// Also inspired by code here:
// https://github.com/jonathan-beard/simple_wc_example


// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    SKet::Parser::token_type				\
    SKet::Scanner::lex(				\
	SKet::Parser::semantic_type* yylval,		\
	SKet::Parser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer SKetFlexLexer
#include <FlexLexer.h>
#undef yyFlexLexer
#endif

#include "../../SemantiKet.h"
// #include "parser.h"
#include "parser.tab.h"
// #include "token.h"
// #include "../../SemantiKet.h"
#include <map>
#include <iostream>
#include <fstream>
// #include "Serial.h"
extern Serial serial;
// extern class SKet::yyTOKEN;


namespace SKet {

    class yyTOKEN;

    /** Scanner is a derived class to add some extra function to the scanner
     * class. Flex itself creates a class named yyFlexLexer, which is renamed using
     * macros to ExampleFlexLexer. However we change the context of the generated
     * yylex() function to be contained within the Scanner class. This is required
     * because the yylex() defined in ExampleFlexLexer has no parameters. */
    
    class Scanner : public SKetFlexLexer
    {
    public:
        /** Create a new scanner object. The streams arg_yyin and arg_yyout default
         * to cin and cout, but that assignment is only made when initializing in
         * yylex(). */
        Scanner(std::istream* arg_yyin = 0, std::ostream* arg_yyout = 0);

        /** Required for virtual functions */
        virtual ~Scanner();

        /** This is the main lexing function. It is generated by flex according to
         * the macro declaration YY_DECL above. The generated bison parser then
         * calls this virtual function to fetch new tokens. */
        virtual Parser::token_type lex(Parser::semantic_type* yylval, Parser::location_type* yylloc);

        /** Enable debug output (via arg_yyout) if compiled into the scanner. */
        void set_debug(bool b);

        // My tweaks:
        int yylineno, yycolno;
        yyTOKEN yytoken, last_token;
        // Tree* yytree;  // where is yytree used?
        AST* yyAST;  // will this be used anywhere?
        int token_count = 0;
        void comment();
        void whitespace();
        bool newline();
        Parser::token_type semicolon(Parser::semantic_type* yylval);

        Parser::token_type scan(Parser::token_type cat);  // Deprecated!
        Parser::token_type scan(Parser::token_type cat, Parser::semantic_type* yylval);
        Parser::token_type scan_null_token(Parser::token_type cat, Parser::semantic_type* yylval);
        

        void lex_error(const std::string& m);
        void lex_error(const Parser::location_type& l, const std::string& m);

    };

};
